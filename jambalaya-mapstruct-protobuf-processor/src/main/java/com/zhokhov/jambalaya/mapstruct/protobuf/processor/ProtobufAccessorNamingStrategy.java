/*
 * Copyright 2021 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.zhokhov.jambalaya.mapstruct.protobuf.processor;

import org.mapstruct.ap.spi.AccessorNamingStrategy;
import org.mapstruct.ap.spi.DefaultAccessorNamingStrategy;
import org.mapstruct.ap.spi.MapStructProcessingEnvironment;

import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import java.util.List;

/**
 * The implementation of {@link AccessorNamingStrategy} service provider interface for Protocol Buffers (protobuf)
 * generated classes.
 *
 * @author Alexey Zhokhov
 */
public class ProtobufAccessorNamingStrategy extends DefaultAccessorNamingStrategy {

    private static final String MESSAGE_LITE_OR_BUILDER = "com.google.protobuf.MessageLiteOrBuilder";

    /**
     * The list of special utilities methods automatically generated by the compiler.
     */
    private static final List<String> SPECIAL_METHODS = List.of(
            // merge* methods
            "mergeFrom", "mergeUnknownFields",
            // has* methods
            "hasField", "hasOneof",
            // clear* methods
            "clearField", "clearOneof",
            // set* methods
            "setUnknownFields",
            // get* methods
            "getInitializationErrorString", "getAllFields", "getUnknownFields", "getDescriptorForType",
            "getDefaultInstanceForType", "getSerializedSize", "getParserForType",
            // is* methods
            "isInitialized"
    );

    protected TypeMirror messageLiteOrBuilder;

    @Override
    public void init(MapStructProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);

        TypeElement typeElement = elementUtils.getTypeElement(MESSAGE_LITE_OR_BUILDER);
        if (typeElement != null) {
            messageLiteOrBuilder = typeElement.asType();
        }
    }

    @Override
    public boolean isGetterMethod(ExecutableElement method) {
        if (isMessageLiteOrBuilder(method)) {
            boolean isGetterMethod = super.isGetterMethod(method);

            if (isGetterMethod) {
                String methodName = method.getSimpleName().toString();

                if (SPECIAL_METHODS.contains(methodName)) {
                    return false;
                }
            }
        }

        return super.isGetterMethod(method);
    }

    @Override
    public boolean isSetterMethod(ExecutableElement method) {
        if (isMessageLiteOrBuilder(method)) {
            boolean isSetterMethod = super.isSetterMethod(method);

            if (isSetterMethod) {
                String methodName = method.getSimpleName().toString();

                if (SPECIAL_METHODS.contains(methodName)) {
                    return false;
                } else if (methodName.endsWith("Bytes") && method.getParameters().size() == 1) {
                    TypeMirror param = method.getParameters().get(0).asType();

                    if (param.toString().equals("com.google.protobuf.ByteString")) {
                        return false;
                    }
                } else if (methodName.endsWith("Value") && method.getParameters().size() == 1) {
                    TypeMirror param = method.getParameters().get(0).asType();

                    if (param.getKind().isPrimitive() && param.toString().equals("int")) {
                        return false;
                    }
                } else if (methodName.startsWith("merge") && method.getParameters().size() == 1) {
                    TypeMirror param = method.getParameters().get(0).asType();

                    if (param.getKind() == TypeKind.DECLARED && typeUtils.isAssignable(param, messageLiteOrBuilder)) {
                        return false;
                    }
                }
            }
        }

        return super.isSetterMethod(method);
    }

    @Override
    protected boolean isFluentSetter(ExecutableElement method) {
        if (isMessageLiteOrBuilder(method)) {
            boolean isFluentSetter = super.isFluentSetter(method);

            if (isFluentSetter) {
                String methodName = method.getSimpleName().toString();

                if (SPECIAL_METHODS.contains(methodName)) {
                    return false;
                }
            }
        }

        return super.isFluentSetter(method);
    }

    @Override
    public boolean isAdderMethod(ExecutableElement method) {
        if (isMessageLiteOrBuilder(method)) {
            boolean isAdderMethod = super.isAdderMethod(method);

            if (isAdderMethod) {
                String methodName = method.getSimpleName().toString();

                if (SPECIAL_METHODS.contains(methodName)) {
                    return false;
                }
            }
        }

        return super.isAdderMethod(method);
    }

    @Override
    public boolean isPresenceCheckMethod(ExecutableElement method) {
        if (isMessageLiteOrBuilder(method)) {
            boolean isPresenceCheckMethod = super.isPresenceCheckMethod(method);

            if (isPresenceCheckMethod) {
                String methodName = method.getSimpleName().toString();

                if (SPECIAL_METHODS.contains(methodName)) {
                    return false;
                }
            }
        }

        return super.isPresenceCheckMethod(method);
    }

    private boolean isMessageLiteOrBuilder(ExecutableElement method) {
        Element receiver = method.getEnclosingElement();
        return messageLiteOrBuilder != null
                && receiver != null
                && typeUtils.isAssignable(receiver.asType(), messageLiteOrBuilder);
    }

}
